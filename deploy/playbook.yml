- hosts: all
  handlers:
    - name: restart nginx
      service: name=nginx state=restarted
    - name: restart php5-fpm
      service: name=php5-fpm state=restarted
  sudo: true

  tasks:
    # Get the box up and running. These tasks run before the box is configured
    # or the project is cloned or built. All system dependencies should be
    # installed here.

    # NOTE: commented out because we do not currently need node on the vm
    # - name: add keys to apt
    #   apt_key: url={{item}} state=present
    #   with_items: apt_keys

    # NOTE: commented out because we do not currently need git or node on the vm
    # - name: add ppas to apt
    #   apt_repository: repo="{{item}}" state=present update_cache=yes
    #   with_items: apt_ppas

    - name: install apt packages
      apt: name={{item}} state=latest update_cache=yes
      with_items: apt.packages
      when: false

    # Configure server. These tasks are run after a server is provisioned but
    # before a project is deployed, to configure the system, add user accounts,
    # and setup long-running processes like nginx, postgres, etc.

    # Configure the box. This happens after the base initialization, but before
    # the project is cloned or built.

    - name: set hostname
      hostname: name={{hostname}}

    - name: add loopback references to our domains in /etc/hosts
      lineinfile:
        dest: /etc/hosts
        state: present
        line: 127.0.0.1 {{hostname}} {{item}}
      with_items:
        - '{{sites.trunk.fqdn}}'
        - '{{sites.stable.fqdn}}'

    - name: allow passwordless sudo - development only!
      lineinfile:
        dest: /etc/sudoers
        state: present
        regexp: ^%sudo
        line: '%sudo\tALL=(ALL:ALL) NOPASSWD:ALL'
        validate: visudo -cf %s
      when: env == 'development'

    # Generate nginx config files, rolling back changes if any part of the
    # config is invalid.

    - name: ensure default nginx server is not present
      file: path=/etc/nginx/sites-enabled/default state=absent

    - name: ensure nginx config files exist
      shell: touch {{nginx.conf_dir}}/{{item.value.slug}}
      args:
        creates: '{{nginx.conf_dir}}/{{item.value.slug}}'
      with_dict: sites

    - name: backup existing nginx config files
      shell: cp {{item.value.slug}} {{item.value.slug}}.backup
      args:
        chdir: '{{nginx.conf_dir}}'
      with_dict: sites

    - name: generate nginx config files
      template: src=templates/nginx.conf dest={{nginx.conf_dir}}/{{item.value.slug}}.conf
      register: nginx_conf
      with_dict: sites #'{{ sites | combine({ env: "{{env}}" }}'
      notify: restart nginx

    - name: ensure nginx config is valid
      shell: nginx -t
      ignore_errors: yes
      register: nginx_test_valid
      changed_when: false
      when: nginx_conf | changed

    - name: remove temporary backups if new nginx config files are valid
      file: path={{nginx.conf_dir}}/{{item.value.slug}}.backup state=absent
      with_dict: sites
      when: nginx_test_valid | success

    - name: restore temporary backups if new nginx config files are invalid
      shell: mv {{item.value.slug}}.backup {{item.value.slug}}
      args:
        chdir: '{{nginx.conf_dir}}'
      with_dict: sites
      when: nginx_test_valid | failed

    - fail: msg='nginx config is invalid'
      when: nginx_test_valid | failed
